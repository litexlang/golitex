"""
1. 有很多小逻辑需要放到标准库里，比如x>0,y>0则x+y>x这种
2. 存在性有两种表达，以下面为例
直接用关键词 exist_prop
exist_prop n Z st item_equals_power_of_item(s, op, e, inv, x, y):
    y = power_of_item(s, op, e, inv, x, n)
用某个函数代替：这种形式的函数是唯一的（因为让y = x^n的n不一定唯一的），但是它确实立刻表达了存在性，同时用起来很方便，适合在定义的时候用（因为定义的时候，什么可以）
fn index_of_y_in_subgroup_generated_by_item(s set, op fn(s, s)s, e s, inv fn(s)s, x s, y subgroup_generated_by_item(s, op, e, inv, x)) Z:
    y = power_of_item(s, op, e, inv, x, index_of_y_in_subgroup_generated_by_item(s, op, e, inv, x, y))
3. C语言以前没有struct，什么东西都是铺开了写；后来用struct来管理，代码更清晰了。Litex现在没有struct，什么东西都是铺开了写；Litex未来会用struct来管理，代码更清晰了。
4. 数学里的符号共用实在太多太多了比如 Fp 上 的加法写成+，R上加法也是+，但是它们是不同的加法（甚至不同的p的加法也是不同的加法）。人类书写的时候全部不区分，但是litex中必须区分。这是自然语言和litex的一大显著不同（因为这是为了保证严格性的代价）。如果涉及到的集合是带参数的（比如Fp，p会变化），一开始写litex的时候很不习惯。这时候可以先考虑固定的Fp，定义好这些概念，最后把Fp改成函数F(p)。
5. 很多时候函数的返回值类型是set，N，这种指向性不明的类型。用户倾向于把对返回值的要求写在fn的then里。像set这种，实在太常见了。最好特地定义一个集合，把then里对这个集合的要求放在这个集合的定义里，让函数的返回值类型是这个集合。这样阅读更容易。
"""