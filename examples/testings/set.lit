prove:
    # Counting is hard to implement in Litex because even in set theory books, they are "known by default". I as language implementer have to implement basic properties of counting by myself.

    prop is_subset_of(x, y set):
        forall z x:
            z $in x
            =>:
                z $in y
        forall:
            y $in finite_set
            =>:
                x $in finite_set
                len(x) <= len(y)

    have set y = {1, 2, 3}

    have x set

    know $is_subset_of(x, y)

    prove:
        x $in finite_set
        len(x) <= len(y)

prove:
    prop is_inter_item(A, B set, x obj):
        x $in A
        x $in B

    fn inter(A, B set) set:
        forall x obj:
            x $in inter(A, B)
            <=>:
                $is_inter_item(A, B, x)

    prop is_equal(A, B set):
        forall x A:
            x $in B
        forall x B:
            x $in A

    claim:
        forall A, B, D set:
            $is_equal(inter(A, inter(B, D)), inter(inter(A, B), D))
        prove:
            forall x inter(A, inter(B, D)):
                $is_inter_item(A, inter(B, D), x)
                x $in A
                x $in inter(B, D)
                $is_inter_item(B, D, x)
                x $in B
                x $in D
                $is_inter_item(A, B, x)
                x $in inter(A, B)
                x $in inter(inter(A, B), D)

            forall x inter(inter(A, B), D):
                $is_inter_item(inter(A, B), D, x)
                x $in inter(A, B)
                x $in D
                $is_inter_item(A, B, x)
                x $in A
                x $in B
                $is_inter_item(B, D, x)
                x $in inter(B, D)
                x $in inter(A, inter(B, D))

            $is_equal(inter(A, inter(B, D)), inter(inter(A, B), D))