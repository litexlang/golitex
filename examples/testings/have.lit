# have statements

# have by exist_prop
prove:
    exist_prop x N st exist_x_larger_than_1():
        x > 1

    exist 2 st $exist_x_larger_than_1()

    have x st $exist_x_larger_than_1()
    x > 1

    fn zero_func(x Z)Z:
        x = 0

    exist_prop f fn(Z)Z st exist_f_is_always_zero():
        forall x Z:
            f(x) = 0

    exist zero_func st $exist_f_is_always_zero()

    have f st $exist_f_is_always_zero()
    forall x Z:
        f(x) = 0

    exist_prop self_add fn(Z, Z)Z st exist_f_always_equal_to_add():
        forall x Z, y Z:
            self_add(x, y) = x + y

    exist + st $exist_f_always_equal_to_add()

# have sets by naive set theory
prove:
    have set s = {1, 2, 3}
    have set s2 = {x N : x > 5}

    s = {3, 2, 1}

    forall x s2:
        x > 5

# have objects from builtin sets
prove:
    have a N, b Z, c Q, d R, e C
    have s set
    have s2 finite_set


# have objects from finite sets len > 0
prove:
    let s finite_set:
        len(s) = 1
    1 > 0
    len(s) > 0
    have a st $exist_item_in(s)
    a $in s


# have objectName st exist_item_in(setName)
# it has syntax sugar: have objectName setName
prove:
    let s set, a obj
    know a $in s
    exist a st $exist_item_in(s)
    $exist_item_in(s)
    have b st $exist_item_in(s)
    b $in s

