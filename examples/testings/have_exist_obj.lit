prove:
    exist_prop a R st exist_x_larger_than(x R) :
        <=>:
            a > x

    # claim spec fact prove
    claim:
        $exist_x_larger_than(1)
        prove:
            exist 2 st $exist_x_larger_than(1)
            
    $exist_x_larger_than(1)
            
    have a st $exist_x_larger_than(1)
    a $in R
    a > 1

    know forall x R,  y R:x > 0 => x + y > y, y + x > y

    # claim forall prove
    claim:
        forall x R:
            $exist_x_larger_than(x)
        prove:
            exist x + 1 st $exist_x_larger_than(x)

    let x R:
        1 >= x

    know:
        forall x R, y R:
            not x < y
            <=>:
                x >= y

    know:
        forall x R, y R:
            x > y
            =>:
                not y >= x

    know @larger_equal_is_transitive(x R, y R, z R):
        x >= y
        y > z
        =>:
            x > z

    # claim spec fact prove by contradiction
    claim:
        x < 2
        prove_by_contradiction:
            x >= 2
            $larger_equal_is_transitive(x, 2, 1)
            x > 1
            not 1 >= x

prove:
    have set s := {1, 2, 3}
    have set s2 := {x N: x > 5}

    s := {3, 2, 1}

    forall x s2:
        x > 5

# have objects from builtin sets
prove:
    have a N, b Z, c Q, d R, e C
    have s set
    have s2 finite_set


# have objects from finite sets len > 0
prove:
    let s finite_set:
        len(s) = 1
    1 > 0
    len(s) > 0
    have a st $exist_item_in(s)
    a $in s


# have objectName st exist_item_in(setName)
# it has syntax sugar: have objectName setName
prove:
    let s set, a obj
    know a $in s
    exist a st $exist_item_in(s)
    $exist_item_in(s)
    have b st $exist_item_in(s)
    b $in s

# have set fn
"""
prove:
    have set fn exclude(s1, s2 set) := {x s1: not x $in s2}

    forall s1, s2 set:
        exclude(s1, s2) $in set

    forall s1, s2 set, x exclude(s1, s2):
        x $in s1
        not x $in s2
"""