# Formalize Terence Tao Analysis 1 Chapter 3 Set Theory

# Definition of Two Sets are Equal
know:
    forall x, y set:
        x = y
        <=>:
            forall a x:
                a $in y
            forall a y:
                a $in x

# Definition of Empty Set
prop is_empty_set(x set):
    forall a obj:
        not a $in x

# There is a builtin-in empty set in Litex
have set builtin_empty_set := {}
forall x obj:
    not x $in builtin_empty_set

exist_prop x obj st obj_exist_in_set(s set):
    x $in s

# There is just one empty set
claim:
    forall s set:
        not $is_empty_set(s)
        =>:
           $obj_exist_in_set(s)
    prove_by_contradiction:
        forall x obj:
            not x $in s
        $is_empty_set(s)
        
# You can define a finite set of items like this:
have set set_of_one_two_three := {1, 2, 3}

# Pairwise Union
fn union(s1 set, s2 set) set
prop obj_in_union_is_in_one_of_the_sets(s1 set, s2 set, x obj):
    or:
        x $in s1
        x $in s2
        

know:
    forall s1, s2 set, x s1:
    	x $in union(s1, s2) 
    forall s1, s2 set, x s2:
    	x $in union(s1, s2) 
    forall s1, s2 set, x union(s1, s2):
        $obj_in_union_is_in_one_of_the_sets(s1, s2, x)

# {a, b} = {a} \union {b}
claim:
	forall a, b obj, s1, s2, x obj:
        s1 := {a}
        s2 := {b}
        x $in union(s1, s2)
        =>:
            or:
                x = a
                x = b
    prove:
        $obj_in_union_is_in_one_of_the_sets(s1, s2, x)
        prove_in_each_case:
            or:
                x $in s1
                x $in s2
            =>:
                or:
                	x = a
                    x = b
            prove:
                x $in s1
                x = a
            prove:
                x $in s2
                x = b

prop is_subset_of(s1 set, s2 set):
    forall x s1:
        x $in s2

prove:
    have set a := {1, 2, 4}
    have set b := {1, 2, 3, 4, 5}
    prove_over_finite_set:
        forall x a:
            x $in b
    a $is_subset_of b

claim:
    @subset_of_is_transitive(a, b, c set):
        a $is_subset_of b
        b $is_subset_of c
        =>:
            a $is_subset_of c
    prove:
        forall x a:
            x $in b
            x $in c
        forall x a:
            x $in c
        a $is_subset_of c

# Axiom of Specification
prove:
    let A set
    prop P(x A)
	have set a := x A:
        $P(x)
    forall x A:
        $P(x)
        =>:
        	x $in a
    forall x a:
        x $in A
        $P(x)

# Intersection
know @obj_in_intersection_is_in_both_sets(s1 set, s2 set, x obj):
    x $in s1
    x $in s2

fn intersection(s1 set, s2 set) set:
    forall x s1:
        x $in intersection(s1, s2)
    forall x s2:
        x $in intersection(s1, s2)
    forall x intersection(s1, s2):
        $obj_in_intersection_is_in_both_sets(s1, s2, x)

# The set of all natural numbers is the union of the set of all natural numbers greater than n and the set of all natural numbers less than or equal to n
know @union_of_N_greater_than_n_and_less_than_or_equal_to_n_is_N(n N, s1 set, s2 set):
	s1 := x N:
		x > n
	s2 := x N:
		x <= n
	=>:
		union(s1, s2) = N

prove:
    have set a := x N:
        x > 0
    have set b := x N:
        x <= 0
    $union_of_N_greater_than_n_and_less_than_or_equal_to_n_is_N(0, a, b)
    union(a, b) = N

have set fn difference(s1 set, s2 set) := x s1:
    not x $in s2

# Union of a set and the empty set is the set itself
claim:
	forall a set, s set:
        s := {}
        =>:
            union(a, s) = a
    prove:
        claim:
        	forall x union(a, s):
                x $in a
            prove_by_contradiction:
            	not x $in a
                $obj_in_union_is_in_one_of_the_sets(a, s, x)
                x $in s
                not x $in s

# Intersection of a set and the empty set is the empty set
claim:
	forall a set, s set:
        s := {}
        =>:
            forall x obj:
            	not x $in intersection(a,s)
    prove:
        claim:
            forall x obj:
                not x $in intersection(a, s)
            prove_by_contradiction:
                x $in intersection(a, s)
                $obj_in_intersection_is_in_both_sets(a, s, x)
                x $in s
        

# Union of a set and itself is the set itself
claim:
    forall a set:
        union(a, a) = a
    prove:
        claim:
        	forall x union(a, a):
                x $in a
            prove:
                $obj_in_union_is_in_one_of_the_sets(a, a, x)
                or:
                	x $in a
                    x $in a
                prove_in_each_case:
                    or:
                        x $in a
                        x $in a
                    =>:
                        x $in a
                    prove:
                        x $in a
                    prove:
                        x $in a
                x $in a
        forall x a:
        	x $in union(a, a)
        forall x union(a, a):
            x $in a
        union(a, a) = a

# Replacement Axiom
prove:
    have A set, B set
    prop P(x A, y B)

    know:
        forall x A, y1, y2 B:
            $P(x, y1)
            $P(x, y2)
            =>:
                $last_two_objects_are_equal(x, y1, y2)

    have set s = set_defined_by_replacement(A, B, P)
    forall x set_defined_by_replacement(A, B, P):
        $obj_exist_as_preimage_of_prop(A, B, P, x)

    forall x s:
    	x $in B

    let y set_defined_by_replacement(A, B, P) # set_defined_by_replacement is like 1,2,3, it has some built-in functions; for example, if we know y $in set_defined_by_replacement(A, B, P), then y $in B is automatically true
    y $in B

    have x st $obj_exist_as_preimage_of_prop(A, B, P, y) # y $in set_defined_by_replacement(A, B, P) is equivalent to exist x $in A st $P(x, y)

    x $in A
    $P(x, y)

# {1,2,3,4} \ {2,4,6} = {1,3}
prove:
	have set s := {1,2,3,4}
    have set t := {2,4,6}
    have set u := {1,3}
    prove_over_finite_set:
        forall x t:
        	x != 1
            x != 3
    forall x t:
        x != 1
        x != 3
    not 1 $in t
    not 3 $in t
    2 $in t
    4 $in t
    1 $in difference(s, t)
    3 $in difference(s, t)
    claim:
        not 2 $in difference(s, t)
        prove_by_contradiction:
        	2 $in difference(s, t)
            2 $in s
            not 2 $in t
    claim:
    	not 4 $in difference(s, t)
        prove_by_contradiction:
        	4 $in difference(s, t)
            4 $in s
            not 4 $in t
    prove_over_finite_set:
        forall x u:
            x $in difference(s, t)
    claim:
        forall x difference(s, t):
            x != 2
        prove_by_contradiction:
            2 $in difference(s, t)
            2 $in s
            not 2 $in t
    claim:
        forall x difference(s, t):
            x != 4
        prove_by_contradiction:
            4 $in difference(s, t)
            4 $in s
            not 4 $in t

    forall x difference(s, t):
        x $in s
        or:
            x = 1
            x = 2
            x = 3
            x = 4

    claim:
        forall k difference(s, t):
            or:
                k = 1
                k = 3
        prove_by_contradiction:
            not k = 1
            not k = 3
            not k = 2
            not k = 4
            or:
                k = 1
                k  = 2
                k = 3
                k = 4

    claim:
        forall k difference(s, t):
            k $in u
        prove:
            prove_in_each_case:
                or:
                    k = 1
                    k = 3
                =>:
                    k $in u
                prove:
                    k $in u
                prove:
                    k $in u

    difference(s, t) = u